version: '3.8'
services:
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    user: root   # Nécessaire pour accéder à /var/run/docker.sock
    ports:
      - "8090:8080"    # Interface Jenkins
      - "50000:50000"  # Connexions agents (optionnel si pas d'agents)
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock  # Pour accéder au Docker host
      - /usr/bin/docker:/usr/bin/docker            # Pour accéder à la commande `docker`
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - my_talent_network

  #Tempo
  tempo:
    image: grafana/tempo
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # Tempo
      - "9411:9411" # zipkin
    networks:
      - my_talent_network

  # Loki
  loki:
    image: grafana/loki:main
    container_name: loki
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"
    networks:
      - my_talent_network

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - my_talent_network


  # RabbitMQ Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"      # Port pour les connexions AMQP (utilisé par les applications)
      - "15672:15672"    # Port pour l’interface web de RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - my_talent_network

  # Postgres Database
  postgres:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: talent_db         # Nom de la base de données par défaut
      POSTGRES_USER: user              # Nom d’utilisateur par défaut
      POSTGRES_PASSWORD: userpassword  # Mot de passe de l'utilisateur
    ports:
      - "5432:5432"                    # Port standard PostgreSQL
    volumes:
      - talent_pg_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql  # Script SQL d'initialisation
    networks:
      - my_talent_network

    # Eureka Service Registry
  eureka-service:
    build: ./eureka-service
    container_name: eureka-service
    ports:
      - '8761:8761'
    expose:
      - '8761'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://eureka-service:8761/actuator/health" ]
      interval: 30s
      retries: 4
      start_period: 40s
    networks:
      - my_talent_network

  # Config Service
  config-server:
    build: ./config-service
    container_name: config-server
    ports:
      - '9191:9191'
    expose:
      - '9191'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://config-server:9191/actuator/health" ]
      interval: 10s
      retries: 4
    depends_on:
      eureka-service:
        condition: service_healthy
    networks:
      - my_talent_network

  # API Gateway Service
  gateway-service:
    build: ./api-gateway-service
    container_name: gateway-service
    ports:
      - '8888:8888'
    expose:
      - '8888'
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - eureka.client.service-url.defaultZone:http://eureka-service:8761/eureka/
    depends_on:
      eureka-service:
        condition: service_healthy
    networks:
      - my_talent_network

  # Candidat Service (utilise Kafka et se connecte à la BD)
  candidat-service:
    build: ./candidat-service
    container_name: candidat-service
    ports:
      - "8081:8081"
    expose:
      - "8081"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://candidat-service:8081/actuator/health" ]
      interval: 10s
      retries: 4
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/candidat_prod_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=userpassword
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:9191/
    depends_on:
      eureka-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres:
        condition: service_started
      tempo:
        condition: service_started
      loki:
        condition: service_started
    networks:
      - my_talent_network

  # Offre Service (utilise Kafka et se connecte à la BD)
  offre-service:
    build: ./offre-emploi-service
    container_name: offre-service
    ports:
      - "8083:8083"
    expose:
      - "8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/offre_prod_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=userpassword
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:9191/
    depends_on:
      candidat-service:
        condition: service_healthy
    networks:
      - my_talent_network

  # Recrutement Service (utilise Kafka et se connecte à la BD)
  recrutement-service:
    build: ./recrutement-service
    container_name: recrutement-service
    ports:
      - "8085:8085"
    expose:
      - "8085"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/recrutement_prod_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=userpassword
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:9191/
    depends_on:
      candidat-service:
        condition: service_healthy
    networks:
      - my_talent_network

    # Recruteur Service (utilise Kafka et se connecte à la BD)
  recruteur-service:
    build: ./recruteur-service
    container_name: recruteur-service
    ports:
      - "8084:8084"
    expose:
      - "8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/recruteur_prod_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=userpassword
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:9191/
    depends_on:
      candidat-service:
        condition: service_healthy
    networks:
      - my_talent_network

  # Statistic Service (utilise Kafka et se connecte à la BD)
  statistic-service:
    build: ./statistic-service
    container_name: statistic-service
    ports:
      - "8086:8086"
    expose:
      - "8086"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:9191/
    depends_on:
      candidat-service:
        condition: service_healthy
    networks:
      - my_talent_network

  # Utilisateur Service
  utilisateur-service:
    build: ./utilisateur-service
    container_name: utilisateur-service
    ports:
      - "8087:8087"
    expose:
      - "8087"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/utilisateur_prod_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=userpassword
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:9191/
    depends_on:
      candidat-service:
        condition: service_healthy
    networks:
      - my_talent_network

    # Notification Service (utilise Kafka)
  notification-talent-service:
    build: ./notification-service
    container_name: notification-talent-service
    ports:
      - "8082:8082"
    expose:
      - "8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/notification_talent_prod_db
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=userpassword
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:9191/
    depends_on:
      candidat-service:
        condition: service_healthy
    networks:
      - my_talent_network

volumes:
  talent_pg_data:
  jenkins_home:

networks:
  my_talent_network:
    driver: bridge

