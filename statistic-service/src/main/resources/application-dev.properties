spring.application.name=statistic-service


spring.config.import=optional:configserver:http://localhost:9191
server.port=8086
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# Spring Cloud Bus
spring.cloud.bus.refresh.enabled=true
spring.cloud.bus.env.enabled=true

# Message de test
spring.boot.message=hello, stat-service
spring.boot.bus.message=hello, stat-service yes

# Configuration Resilience4j pour le circuit breaker

# Expose la santé du circuit breaker via /actuator/health
resilience4j.circuitbreaker.instances.statistic-service.registerHealthIndicator=true

# Nombre total d'appels à surveiller (fenêtre de glissement)
# Ici, on évalue les 10 derniers appels pour calculer le taux d?échec
resilience4j.circuitbreaker.instances.statistic-service.slidingWindowSize=10

# Nombre minimal d'appels requis pour commencer à calculer le taux d?échec
# Ici, tant qu?on n?a pas au moins 5 appels, le circuit breaker ne s'active pas
resilience4j.circuitbreaker.instances.statistic-service.minimumNumberOfCalls=5

# Pourcentage d?échecs autorisé avant d?ouvrir le circuit
# Ici, si 50% ou plus des appels échouent, le circuit passe à OPEN
resilience4j.circuitbreaker.instances.statistic-service.failureRateThreshold=50

# Durée pendant laquelle le circuit reste ouvert avant de tenter des appels de test
# Ici, après 10 secondes, on passe à HALF-OPEN pour tester si le service est de retour
resilience4j.circuitbreaker.instances.statistic-service.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.statistic-service.automatic-transition-from-open-to-half-open-enabled=true

# Nombre d'appels autorisés en mode HALF-OPEN pour tester si le service est à nouveau stable
# Ici, on autorise 3 appels : si tous réussissent, on referme le circuit (CLOSED)
resilience4j.circuitbreaker.instances.statistic-service.permittedNumberOfCallsInHalfOpenState=3

# Type de fenêtre : ici, on base la surveillance sur le **nombre** d'appels, et non la durée
resilience4j.circuitbreaker.instances.statistic-service.slidingWindowType=COUNT_BASED


# Exposer les endpoints pour le monitoring
management.endpoints.web.exposure.include=health,info,circuitbreakers,metrics
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true


# Retry
resilience4j.retry.instances.statistic-service.max-attempts=3
resilience4j.retry.instances.statistic-service.wait-duration=1s
resilience4j.retry.instances.statistic-service.retry-exceptions=org.springframework.web.reactive.function.client.WebClientRequestException
resilience4j.retry.instances.statistic-service.enable-exponential-backoff=true
resilience4j.retry.instances.statistic-service.exponential-backoff-multiplier=2
logging.level.io.github.resilience4j.retry=DEBUG


resilience4j.retry.metrics.enabled=true
resilience4j.retry.health-indicator.enabled=true
resilience4j.retry.register-health-indicator=true


